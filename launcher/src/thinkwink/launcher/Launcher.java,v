head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2005.02.24.02.44.47;	author fdlcruz;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Issue number:
Obtained from:
Submitted by:  fdlcruz
Reviewed by:
CVS: ----------------------------------------------------------------------
CVS: Issue number:
CVS:   If this change addresses one or more issues,
CVS:   then enter the issue number(s) here.
CVS: Obtained from:
CVS:   If this change has been taken from another system,
CVS:   then name the system in this line, otherwise delete it.
CVS: Submitted by:
CVS:   If this code has been contributed to the project by someone else; i.e.,
CVS:   they sent us a patch or a set of diffs, then include their name/email
CVS:   address here. If this is your work then delete this line.
CVS: Reviewed by:
CVS:   If we are doing pre-commit code reviews and someone else has
CVS:   reviewed your changes, include their name(s) here.
CVS:   If you have not had it reviewed then delete this line.
@
text
@/*
 * Created on Jul 6, 2004
 *
 * To change the template for this generated file go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */
package thinkwink.launcher;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;


/**
 * @@author Pule
 *
 * To change the template for this generated type comment go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */
public class Launcher extends Thread {
	public final String execFile = "bin/runme.txt";
	public final String outFile = "logs/stdout.txt";
	public final String errFile = "logs/stderr.txt";
	
	private ProgressMediator progressMediator;
	private LibClassFinder   libClassLoader;
	private LauncherProperties launcherProperties;

	public static void main(String[] args){
		new Launcher(null, null, null);
	}

	public Launcher(ProgressMediator progressMediator, LibClassFinder classLoader, LauncherProperties launcherProperties) {
		
		setProgressMediator(progressMediator);
		setLibClassLoader(classLoader);
		setLauncherProperties(launcherProperties);

		new Thread(this).start();
	}
	
	public void run(){
		List applicationRunnerList;
		
		applicationRunnerList = new ArrayList();
		
		try {
			//read and parse runme.txt
			applicationRunnerList = readAndParse();

			//execute
			execute(applicationRunnerList);
			
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	private void execute(List applicationRunnerList) throws InterruptedException{
		ApplicationRunner  applicationRunner;
		ProgressMediator   progressMediator;
		LauncherProperties launcherProperties;
		List               threads;
		
		progressMediator   = getProgressMediator();
		launcherProperties = getLauncherProperties();
		threads            = new ArrayList(); 
		
		for(int i=0; i<applicationRunnerList.size(); i++){
			applicationRunner = (ApplicationRunner) applicationRunnerList.get(i);
			
			progressMediator.setText("Now Executing: " + applicationRunner.getName());
			
			threads.add(applicationRunner);
		
		}
		
		if(launcherProperties.runModeIs(launcherProperties.PARALLEL)){
			runInParallel(threads);	
		} else {
			runInSerial(threads);
		}
	}
	
	/**
	 * Run the threads in parallel.
	 * @@param threads
	 * @@throws InterruptedException
	 */
	private void runInParallel(List threads) throws InterruptedException{
		Thread t;
		
		for(int i=0; i<threads.size(); i++){
			t = (Thread) threads.get(i);
			
			t.start();
		}
		
		for(int i=0; i<threads.size(); i++){
			t = (Thread) threads.get(i);
			
			t.join();
		}
	}
	
	/**
	 * Run the threads in serial.
	 * @@param threads
	 * @@throws InterruptedException
	 */
	private void runInSerial(List threads) throws InterruptedException {
		Thread t;

		for (int i = 0; i < threads.size(); i++) {
			t = (Thread) threads.get(i);

			t.start();
			t.join();
		}
	}
	
	
	private void setProgressMediator(ProgressMediator progressMediator){
		this.progressMediator = progressMediator;
	}
	
	private ProgressMediator getProgressMediator(){
		return progressMediator;
	}
	
	private void setLibClassLoader(LibClassFinder libClassLoader){
		this.libClassLoader = libClassLoader;
	}
	
	private LibClassFinder getLibClassLoader(){
		return libClassLoader;
	}
	
	private void setLauncherProperties(LauncherProperties launcherProperties){
		this.launcherProperties = launcherProperties;
	}
	
	private LauncherProperties getLauncherProperties(){
		return launcherProperties;
	}
	
	private List readAndParse() throws IOException, ClassNotFoundException{
		File              runmeFile;
		FileReader        runmeFileReader;
		BufferedReader    runmeBuffer;
		String            command;
		ApplicationRunner applicationRunner;
		List              applicationRunnerList;
		LibClassFinder    libClassLoader;
		
		runmeFile             = new File("lib/runme.txt");
		runmeFileReader       = new FileReader(runmeFile);
		runmeBuffer           = new BufferedReader(runmeFileReader);
		applicationRunnerList = new ArrayList();
		libClassLoader        = getLibClassLoader();
		
		while(runmeBuffer.ready()){
			command = runmeBuffer.readLine();
			
			applicationRunner = new ApplicationRunner(command, getLibClassLoader());
			
			applicationRunnerList.add(applicationRunner);
		}
		
		return applicationRunnerList;
	}
}

@
