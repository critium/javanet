head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2009.07.02.22.02.09;	author fdlcruz;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.24.02.44.47;	author fdlcruz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Issue number: NONE
Obtained from: NONE
Submitted by:  NONE
Reviewed by:  NONE
@
text
@/*
 * Created on Jul 6, 2004
 *
 * To change the template for this generated file go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */
package thinkwink.launcher;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

/**
 * @@author Pule
 *
 */
public class LibClassFinder {
    private static File       libDir;
    private FilterClassLoader classLoader;

    public static void main(String[] args){
        new LibClassFinder(new ProgressMediator(null), null, null, null);
    }

    public LibClassFinder(
            ProgressMediatorIface progressMediator,
            List<String> restrictedPackages,
            List<String> allowedClasses,
            List<String> restrictedClasses) {
        List  URLList;
        URL[] URLs;

        try {
            URLList = new ArrayList();

            progressMediator.setText("Loading Classes....");

            if(progressMediator instanceof ProgressMediator){
                ProgressMediator pm = (ProgressMediator) progressMediator;
                pm.getProgressBar().setIndeterminate(true);
            }

            addURLtoClassLoader(progressMediator, getLibDir(), URLList);

            URLs = new URL[URLList.size()];

            URLList.toArray(URLs);

            classLoader = new FilterClassLoader(URLs, restrictedPackages, allowedClasses, restrictedClasses);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public Class getClass(String classname) throws ClassNotFoundException{
        URLClassLoader classLoader;
        Class          myClass;

        classLoader = getClassLoader();
        myClass     = classLoader.loadClass(classname);

        return myClass;
    }

    public FilterClassLoader getClassLoader(){
        return classLoader;
    }

    private void addURLtoClassLoader(ProgressMediatorIface progressMediator, File f, List URLList) throws MalformedURLException {
        File[] fs;
        String fileName;

        fs = f.listFiles();

        for(int i=0; i<fs.length; i++){

            fileName = fs[i].getName();

            //if jar add jar.
            if(fileName.toLowerCase().endsWith(".jar")){
                progressMediator.setText("Loading JAR file : " + fileName);
                URLList.add(fs[i].toURL());

            }

            //if property add property.
            if(fileName.toLowerCase().endsWith(".properties")){
                System.out.println("Loading Property file : " + fileName);
                progressMediator.setText("Loading Property file : " + fileName);
                URLList.add(fs[i].toURL());

            }

            //if class add class?
            if(fileName.toLowerCase().endsWith(".class")){
                if(!URLList.contains(fs[i].getParentFile().toURL())){
                    progressMediator.setText("loading Directory: " + fs[i].getParentFile().toURL());
                    URLList.add(fs[i].getParentFile().toURL());
                }
            }

            if(fs[i].isDirectory()){
                addURLtoClassLoader(progressMediator, fs[i], URLList);

            }
        }
    }

    private static File getLibDir() {
        if(libDir == null){
            libDir = new File("lib");

            if(libDir.exists()){
                Logger.global.info(libDir.getAbsolutePath() + " Exists!");
            } else {
                libDir = new File("c://dev//workspace//launcher//export//lib");
            }
        }

        return libDir;
    }

    public String toString(){
        return "LibClassLoader";
    }
}@


1.1
log
@Issue number:
Obtained from:
Submitted by:  fdlcruz
Reviewed by:
CVS: ----------------------------------------------------------------------
CVS: Issue number:
CVS:   If this change addresses one or more issues,
CVS:   then enter the issue number(s) here.
CVS: Obtained from:
CVS:   If this change has been taken from another system,
CVS:   then name the system in this line, otherwise delete it.
CVS: Submitted by:
CVS:   If this code has been contributed to the project by someone else; i.e.,
CVS:   they sent us a patch or a set of diffs, then include their name/email
CVS:   address here. If this is your work then delete this line.
CVS: Reviewed by:
CVS:   If we are doing pre-commit code reviews and someone else has
CVS:   reviewed your changes, include their name(s) here.
CVS:   If you have not had it reviewed then delete this line.
@
text
@a19 2
 * To change the template for this generated type comment go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
d22 109
a130 91
	private static File    libDir;
	private URLClassLoader classLoader;
		
	public static void main(String[] args){
		new LibClassFinder(new ProgressMediator(null), null);
	}
	
	public LibClassFinder(ProgressMediator progressMediator, LauncherProperties launcherProperties) {
		List  URLList;
		URL[] URLs;
				
		try {
			URLList = new ArrayList();
			
			progressMediator.setText("Loading Classes....");
			progressMediator.getProgressBar().setIndeterminate(true);
			
			addURLtoClassLoader(progressMediator, getLibDir(), URLList);
		
			URLs = new URL[URLList.size()];
			
			URLList.toArray(URLs);
		
			classLoader = new LibClassLoader(URLs);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public Class getClass(String classname) throws ClassNotFoundException{
		URLClassLoader classLoader;
		Class          myClass;
		
		classLoader = getURLClassLoader();		
		myClass     = classLoader.loadClass(classname);
		
		return myClass;
	}
	
	public URLClassLoader getURLClassLoader(){
		return classLoader;
	}
	
	private void addURLtoClassLoader(ProgressMediator progressMediator, File f, List URLList) throws MalformedURLException {
		File[] 		   fs;
		String 		   fileName;
		
		fs          = f.listFiles();
		
		for(int i=0; i<fs.length; i++){
			
			fileName = fs[i].getName();
			
			//if jar add jar.
			if(fileName.toLowerCase().endsWith(".jar")){
				progressMediator.setText("Loading JAR file : " + fileName);
				URLList.add(fs[i].toURL());
				
			}
			
			//if class add class?
			if(fileName.toLowerCase().endsWith(".class")){
				if(!URLList.contains(fs[i].getParentFile().toURL())){
					progressMediator.setText("loading Directory: " + fs[i].getParentFile().toURL());
					URLList.add(fs[i].getParentFile().toURL());	
				}				
			}
			
			if(fs[i].isDirectory()){
				addURLtoClassLoader(progressMediator, fs[i], URLList);	
				
			}
		}
	}
	
	private static File getLibDir() {	
		if(libDir == null){
			libDir = new File("lib");
			
			if(libDir.exists()){
				Logger.global.info(libDir.getAbsolutePath() + " Exists!");
			}
		}
		
		return libDir;
	}
	
	public String toString(){
		return "LibClassLoader";
	}
@

