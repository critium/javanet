head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2009.07.02.22.02.09;	author fdlcruz;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.24.02.44.47;	author fdlcruz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Issue number: NONE
Obtained from: NONE
Submitted by:  NONE
Reviewed by:  NONE
@
text
@/*
 * Created on Jul 8, 2004
 *
 * To change the template for this generated file go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */
package thinkwink.launcher;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.logging.Logger;

/**
 * @@author Pule
 *
 * To change the template for this generated type comment go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */
public class ApplicationRunner extends Thread {
    private LibClassFinder classLoader;
    private Method         myMain;
    private Class          myClass;
    private String		   className;
    private String         command;
    private String[]       args;
    private boolean        isJava;


    public ApplicationRunner(String command, LibClassFinder classLoader) throws ClassNotFoundException{
        this.classLoader = classLoader;
        this.command     = command;

        String[] args = new String[]{};

        try {
            parse(command);
        } catch (SecurityException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }

    private void parse(String command) throws ClassNotFoundException, SecurityException, NoSuchMethodException{
        //TODO: still need to work on other java options like -D

        String[] parsedString;

        parsedString = command.split("\\s");

        if(parsedString[0].toLowerCase().equals("java")){
            isJava = true;

            className = parsedString[1];
            myClass   = classLoader.getClass(className);
            myMain    = myClass.getMethod("main", new Class[] {String[].class});

            if(parsedString.length>2){
                args    = new String[parsedString.length-2];

                for(int i=2; i<parsedString.length; i++){
                    args[i-2] = parsedString[i];
                }
            }
        }
    }



    public void run(){
        Process p;
        Runtime r;

        try {
            if(isJava){
                args = new String[]{};

                Logger.global.info(
                    "Invoking "
                        + myMain.getName()
                        + " in class "
                        + myMain.getDeclaringClass().getName()
                        + " with classLoader: "
                        + myMain.getDeclaringClass().getClassLoader().toString());

                Thread t = Thread.currentThread();
                t.setContextClassLoader(classLoader.getClassLoader());

                myMain.invoke(null, new Object[]{args});


            } else {
                try{
                    Logger.global.info("Invoking " + command);
                    r = Runtime.getRuntime();
                    p = r.exec(command);


//					use this for logging.
//					System.setOut(
//						new PrintStream(
//							new FileOutputStream(
//								outFile,
//								true)));
//					System.setErr(
//						new PrintStream(
//							new FileOutputStream(
//								errFile,
//								true)));

                    //if not serial, waiting, then do not call waitfor.
                    p.waitFor();
                } catch (Exception e){
                    e.printStackTrace();
                }

            }



        } catch (IllegalArgumentException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
}
@


1.1
log
@Issue number:
Obtained from:
Submitted by:  fdlcruz
Reviewed by:
CVS: ----------------------------------------------------------------------
CVS: Issue number:
CVS:   If this change addresses one or more issues,
CVS:   then enter the issue number(s) here.
CVS: Obtained from:
CVS:   If this change has been taken from another system,
CVS:   then name the system in this line, otherwise delete it.
CVS: Submitted by:
CVS:   If this code has been contributed to the project by someone else; i.e.,
CVS:   they sent us a patch or a set of diffs, then include their name/email
CVS:   address here. If this is your work then delete this line.
CVS: Reviewed by:
CVS:   If we are doing pre-commit code reviews and someone else has
CVS:   reviewed your changes, include their name(s) here.
CVS:   If you have not had it reviewed then delete this line.
@
text
@d20 83
a102 80
	private LibClassFinder classLoader;
	private Method         myMain;
	private Class          myClass;
	private String		   className;
	private String         command;
	private String[]       args;
	private boolean        isJava;
	
	
	public ApplicationRunner(String command, LibClassFinder classLoader) throws ClassNotFoundException{
		this.classLoader = classLoader;
		this.command     = command;
		
		String[] args = new String[]{};
		
		try {
			parse(command);
		} catch (SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	private void parse(String command) throws ClassNotFoundException, SecurityException, NoSuchMethodException{
		//TODO: still need to work on other java options like -D
		
		String[] parsedString;
		
		parsedString = command.split("\\s");
		
		if(parsedString[0].toLowerCase().equals("java")){
			isJava = true;
			
			className = parsedString[1];
			myClass   = classLoader.getClass(className);
			myMain    = myClass.getMethod("main", new Class[] {String[].class});
			
			if(parsedString.length>2){
				args    = new String[parsedString.length-2];
				
				for(int i=2; i<parsedString.length; i++){
					args[i-2] = parsedString[i];
				}
			}
		}
	}
	
	
	
	public void run(){
		Process p;
		Runtime r;

		try {
			if(isJava){
				args = new String[]{};
				
				Logger.global.info(
					"Invoking "
						+ myMain.getName()
						+ " in class "
						+ myMain.getDeclaringClass().getName()
						+ " with classLoader: "
						+ myMain.getDeclaringClass().getClassLoader().toString());
						
				myMain.invoke(null, new Object[]{args});
				
				
			} else {
				try{
					Logger.global.info("Invoking " + command);
					r = Runtime.getRuntime();	
					p = r.exec(command);
d117 21
a137 21
					//if not serial, waiting, then do not call waitfor.
					p.waitFor();
				} catch (Exception e){
					e.printStackTrace();
				}

			}
			
			
			
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
@

